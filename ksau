#!/bin/bash

#Define colors
normal=$(echo -en "\e[0m")
orange=$(echo -en "\e[33m")
aqua=$(echo -en "\e[36m")
lightgreen=$(echo -en "\e[92m")
Normal='\033[0m'
Black='\033[0;30m'  # Black
Red='\033[0;31m'    # Red
Green='\033[0;32m'  # Green
Yellow='\033[0;33m' # Yellow
Blue='\033[0;34m'   # Blue
Purple='\033[0;35m' # Purple
Cyan='\033[0;36m'   # Cyan
White='\033[0;37m'  # White

set -o pipefail
readonly file="$2"
readonly u_folder="$3"
readonly status_dir="$(mktemp -d)"

trap "rm -rf $status_dir" EXIT

dependencies () {
echo ""
echo "Make sure you have sudo privilages"
echo "This will only work for Linux/macOS/BSD systems."
echo ""
sudo curl https://rclone.org/install.sh 2>/dev/null | sudo bash > /dev/null 2>&1
echo ""
echo "${orange}Please install jq manually, No script found"
echo "Possibly with 
			${aqua}sudo apt-get install jq ${normal}OR 
			${aqua}sudo pacman -S jq ${normal}OR 
			${aqua}sudo dnf install jq ${normal}OR
			${aqua}sudo zypper install jq ${normal}OR
			${aqua}apk add jq ${normal}OR 
			${aqua}pkg install jq${normal}"
echo ''
}

setup () {
	mkdir -p  ~/.config/rclone
	rm  ~/.config/rclone/rclone.conf > /dev/null 2>&1
		if ! command -v wget &> /dev/null
		then
			echo "${aqua}Does this machine even have simple pkgs installed?"
			echo "Please install ${orange}wget ${aqua}manually and continue...${normal}"
			exit
		fi
	wget  https://gist.githubusercontent.com/noobyysauraj/cf531848e0d849296406d38a98b2a544/raw/rclone.conf > /dev/null 2>&1
	mv rclone.conf ~/.config/rclone
	if ! command -v rclone &> /dev/null
	then
		echo "${aqua}Dependencies not found. Make sure to proceed with the command 'ksau dependencies'"
		echo "${aqua}OR manually install ${orange}rclone ${aqua}and ${orange}jq${normal}"
		exit
	else
		if ! command -v jq &> /dev/null
		then
			echo "${aqua}Dependencies not found. Make sure to proceed with the command 'ksau dependencies'"
			echo "${aqua}Please install jq manually, No script found"
			echo "Possibly with 
					${aqua}sudo apt-get install jq ${normal}OR 
					${aqua}sudo pacman -S jq ${normal}OR 
					${aqua}sudo dnf install jq ${normal}OR
					${aqua}sudo zypper install jq ${normal}OR
					${aqua}apk add jq ${normal}OR 
					${aqua}pkg install jq${normal}"
			exit
		fi
	fi
	echo "Setup Completed"
}

progress_bar() {
    if [ "$(tput cols)" -lt 84 ]; then
        [ -z $1 ] && set -- "(Starting)" "..." "..." "..."
        echo "${Green}${1}%  UPS: ${Cyan}2  ${Yellow}ETA: ${3}  STATUS: ${Cyan}${4}${Normal}"
        return
    fi

    if [[ ${1} < 10 ]]; then
        echo "${Yellow}Progress ${Green}[=>---------${Cyan}${1}%${Normal}${Green}---------<=] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 20 ]]; then
        echo "${Yellow}Progress ${Green}[==>--------${Cyan}${1}%${Normal}${Green}--------<==] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 30 ]]; then
        echo "${Yellow}Progress ${Green}[===>-------${Cyan}${1}%${Normal}${Green}-------<===] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 40 ]]; then
        echo "${Yellow}Progress ${Green}[====>------${Cyan}${1}%${Normal}${Green}------<====] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 50 ]]; then
        echo "${Yellow}Progress ${Green}[=====>-----${Cyan}${1}%${Normal}${Green}-----<=====] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 60 ]]; then
        echo "${Yellow}Progress ${Green}[======>----${Cyan}${1}%${Normal}${Green}----<======] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 70 ]]; then
        echo "${Yellow}Progress ${Green}[=======>---${Cyan}${1}%${Normal}${Green}---<=======] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 80 ]]; then
        echo "${Yellow}Progress ${Green}[========>--${Cyan}${1}%${Normal}${Green}--<========] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 90 ]]; then
        echo "${Yellow}Progress ${Green}[=========>-${Cyan}${1}%${Normal}${Green}-<=========] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 100 ]]; then
        echo "${Yellow}Progress ${Green}[==========>${Cyan}${1}%${Normal}${Green}<==========] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    elif [[ ${1} == 100 ]]; then
        echo "${Yellow}Progress ${Green}[===========${Cyan}${1}%${Normal}${Green}===========] ${Yellow}Speed:${Cyan}${2} ${Yellow}ETA:${Cyan}${3} ${Yellow}Status:${Cyan}${4}${Normal}"
    fi
}

rclone_progress_bar() {
    tput civis
    echo "Starting Upload..."
    rm -f log
    touch log
	rclone -P --checkers=32 --onedrive-chunk-size 60M copy "$file" oned:/"${u_folder}" | tee log >/dev/null || touch "$status_dir/failed" &
    until [ -z "$(jobs -r)" ]; do
        if [ -f "$status_dir/failed" ]; then
            echo
            echo "${Red}Upload failed!${Normal}"
            break
        fi
        show_bar=$(progress_bar "$(grep -Eo '[0-9]{1,3}'% log | tail -n1 | cut -d '%' -f 1)" "$(grep 'ETA' log | tail -n1 | cut -d ',' -f5  | sed 's/^ *//g' | sed 's/ $//g')" "$(grep 'ETA' log | tail -n1 | cut -d ',' -f6 | sed 's/ETA //' | sed 's/^ *//g' | sed 's/ $//g')" "$(grep 'ETA' log | tail -n1 | cut -d ',' -f3  | sed 's/^.*   //' | sed 's/^ *//g' | sed 's/ $//g')")
        echo -ne "\r$show_bar"
        sleep 0.1
    done #|| echo -ne "\rDownload Can't be completed, Check download link." && tput cnorm && exit 1
    tput cnorm
}
end_animation() {
    tput civis

    dls=$(grep 'CN' log | tail -n1 | cut -d ' ' -f 4 | sed 's/DL://')
    echo -ne "\r${Yellow}Progress ${Green}[=======->${Cyan}Completed${Green}<-======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======/>${Cyan}COmpleted${Green}<\======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======|>${Cyan}COMpleted${Green}<|======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======\>${Cyan}COMPleted${Green}</======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======->${Cyan}COMPLeted${Green}<-======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======/>${Cyan}COMPLEted${Green}<\======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======|>${Cyan}COMPLETed${Green}<|======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======\>${Cyan}COMPLETEd${Green}</======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======->${Cyan}COMPLETED${Green}<-======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======/>${Cyan}COMPLETED${Green}<\======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[=======|>${Cyan}COMPLETED${Green}<|======] ${Yellow}Speed:${dls}${Normal}"
    sleep 0.2
    echo

    tput cnorm
}



# Below function is copied from - https://gist.github.com/jaytaylor/5a90c49e0976aadfe0726a847ce58736
# Credit to @jkishner for https://gist.github.com/jkishner/2fccb24640a27c2d7ac9
function url_encode() {
    echo "$@" \
    | sed \
        -e 's/%/%25/g' \
        -e 's/ /%20/g' \
        -e 's/!/%21/g' \
        -e 's/"/%22/g' \
        -e "s/'/%27/g" \
        -e 's/#/%23/g' \
        -e 's/(/%28/g' \
        -e 's/)/%29/g' \
        -e 's/+/%2b/g' \
        -e 's/,/%2c/g' \
        -e 's/-/%2d/g' \
        -e 's/:/%3a/g' \
        -e 's/;/%3b/g' \
        -e 's/?/%3f/g' \
        -e 's/@/%40/g' \
        -e 's/\$/%24/g' \
        -e 's/\&/%26/g' \
        -e 's/\*/%2a/g' \
        -e 's/\./%2e/g' \
        -e 's/\//%2f/g' \
        -e 's/\[/%5b/g' \
        -e 's/\\/%5c/g' \
        -e 's/\]/%5d/g' \
        -e 's/\^/%5e/g' \
        -e 's/_/%5f/g' \
        -e 's/`/%60/g' \
        -e 's/{/%7b/g' \
        -e 's/|/%7c/g' \
        -e 's/}/%7d/g' \
        -e 's/~/%7e/g'
}

upload () {
	echo "Initializing process, might take up to 10 seconds..."
  rclone_progress_bar
  wait
  if [ -f "$status_dir/failed" ]; then
      echo -e "\rUpload Failed .......\n"
      exit 1
  fi
  end_animation  
  u_file=$(basename "${file}")
  url_file=$(url_encode "$u_file")
	url_folder=$(jq -rn --arg x "${u_folder}" '$x|@uri')
	echo " Upload Completed "
	echo " Download link - ${lightgreen}https://index.sauraj.eu.org/${url_folder}/${url_file}${normal} "
}

help ()  {
echo "

${aqua}Usage : ksau <options> <params>${normal}

${aqua}upload <filename> <folder to upload>${normal} : Uploads the given file to the given folder.
${aqua}setup${normal} : Recquired while using first time.
${aqua}update${normal} : Fetch and install latest version available.
${aqua}dependencies${normal} : Installs recquired dependencies.
${aqua}help${normal} : To get this message.
${aqua}version${normal} : To get version info.

Example : ${lightgreen}ksau upload test.txt Public

${orange}Tool By Sauraj (@Ksauraj)${normal}

"
}	

update () {
	echo "${orange}Current" "$(ksau version)"
	echo "${orange}Fetching latest version.${normal}"
	curl https://raw.githubusercontent.com/noobyysauraj/global_index_source/master/ksau > ksau 2>/dev/null
	sudo rm /usr/local/bin/ksau
	sudo mv ksau /usr/local/bin
	chmod +x /usr/local/bin/ksau	
	echo "${orange}Update Finished${normal}"
	echo "${orange}Updated to" "$(ksau version)"
	echo "${normal}"
}

version () {
	echo "${orange}Version - 1.4.2 (Stable) ${normal}"
}

if [[ $1 == "upload" ]]; then
upload
elif [[ $1 == "setup" ]]; then
setup
elif [[ $1 == "dependencies" ]]; then
dependencies
elif [[ $1 == "update" ]]; then
update
elif [[ $1 == "version" ]]; then
version
elif [[ $1 == "help" ]]; then
help
elif [[ $1 == "" ]]; then
help
fi

