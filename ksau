#!/bin/bash

readonly KSAU_VERSION=151
readonly KSAU_RELEASE_TYPE=stable
readonly KSAU_VERSION_STRING="Version 1.5.1 (Stable)"

#Define colors
normal=$(echo -en "\e[0m")
orange=$(echo -en "\e[33m")
aqua=$(echo -en "\e[36m")
lightgreen=$(echo -en "\e[92m")
Normal='\033[0m'
Black='\033[0;30m'  # Black
Red='\033[0;31m'    # Red
Green='\033[0;32m'  # Green
Yellow='\033[0;33m' # Yellow
Blue='\033[0;34m'   # Blue
Purple='\033[0;35m' # Purple
Cyan='\033[0;36m'   # Cyan
White='\033[0;37m'  # White

set -o pipefail
readonly status_dir="$(mktemp -d)"

trap "rm -rf $status_dir" EXIT

dependencies() {
    if declare -p TERMUX_VERSION &>/dev/null; then
        echo "Starting Installation...."
        pkg update >/dev/null 2>&1
        pkg install rclone jq -y >/dev/null 2>&1
        echo ""
        echo "${orange}Installation Completed. ${normal}"
        return
    fi

    echo ""
    echo "Make sure you have sudo privilages"
    echo "This will only work for Linux/macOS/BSD systems."
    echo ""
    sudo curl https://rclone.org/install.sh 2>/dev/null | sudo bash >/dev/null 2>&1
    echo ""
    echo "${orange}Please install jq manually, No script found"
    echo "Possibly with 
			${aqua}sudo apt-get install jq ${normal}OR
			${aqua}sudo pacman -S jq ${normal}OR
			${aqua}sudo dnf install jq ${normal}OR
			${aqua}sudo zypper install jq ${normal}OR
			${aqua}apk add jq ${normal}OR
			${aqua}pkg install jq${normal}"
    echo ''
}

setup() {
    mkdir -p ~/.config/rclone
    rm ~/.config/rclone/rclone.conf >/dev/null 2>&1
    if ! command -v wget &>/dev/null; then
        echo "${aqua}Does this machine even have simple pkgs installed?"
        echo "Please install ${orange}wget ${aqua}manually and continue...${normal}"
        exit
    fi
    wget https://gist.githubusercontent.com/noobyysauraj/cf531848e0d849296406d38a98b2a544/raw/rclone.conf >/dev/null 2>&1
    mv rclone.conf ~/.config/rclone
    if ! command -v rclone &>/dev/null; then
        echo "${aqua}Dependencies not found. Make sure to proceed with the command 'ksau dependencies'"
        echo "${aqua}OR manually install ${orange}rclone ${aqua}and ${orange}jq${normal}"
        exit
    else
        if ! command -v jq &>/dev/null; then
            echo "${aqua}Dependencies not found. Make sure to proceed with the command 'ksau dependencies'"
            echo "${aqua}Please install jq manually, No script found"
            echo "Possibly with
					${aqua}sudo apt-get install jq ${normal}OR
					${aqua}sudo pacman -S jq ${normal}OR
					${aqua}sudo dnf install jq ${normal}OR
					${aqua}sudo zypper install jq ${normal}OR
					${aqua}apk add jq ${normal}OR
					${aqua}pkg install jq${normal}"
            exit
        fi
    fi
    echo "Setup Completed"
}

# Generates new filename with random strings at last (before extension if present).
# new name for 'myfile.txt' -> 'myfile-78e11b8c.txt'
# new name for 'myfile' -> 'myfile-78e11b8c'
add_random_string() {
    local filename="$1"
    local extension="${filename##*.}"
    local name="${filename%.*}"
    local random_string="$(date +%s | sha256sum | base64 | head -c 8)"
    if [ -z "$extension" ]; then
        new_filename="$name-$random_string"
    else
        new_filename="$name-$random_string.$extension"
    fi
}

# Simple progressbar animation.
# Usage : progress_bar ${percentage} ${upload_speed} $(eta) ${status}
progress_bar() {
    if [ "$(tput cols)" -lt 84 ]; then
        [ -z $1 ] && set -- "(Starting)" "..." "..." "..."
        echo "${Green}${1}%  UPS: ${Cyan}2  ${Yellow}ETA: ${3}  STATUS: ${Cyan}${4}${Normal}"
        return
    fi

    if [[ ${1} < 10 ]]; then
        echo "${Yellow}Progress ${Green}[=>---------${Cyan}${1}%${Normal}${Green}---------<=]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 20 ]]; then
        echo "${Yellow}Progress ${Green}[==>--------${Cyan}${1}%${Normal}${Green}--------<==]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 30 ]]; then
        echo "${Yellow}Progress ${Green}[===>-------${Cyan}${1}%${Normal}${Green}-------<===]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 40 ]]; then
        echo "${Yellow}Progress ${Green}[====>------${Cyan}${1}%${Normal}${Green}------<====]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 50 ]]; then
        echo "${Yellow}Progress ${Green}[=====>-----${Cyan}${1}%${Normal}${Green}-----<=====]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 60 ]]; then
        echo "${Yellow}Progress ${Green}[======>----${Cyan}${1}%${Normal}${Green}----<======]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 70 ]]; then
        echo "${Yellow}Progress ${Green}[=======>---${Cyan}${1}%${Normal}${Green}---<=======]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 80 ]]; then
        echo "${Yellow}Progress ${Green}[========>--${Cyan}${1}%${Normal}${Green}--<========]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 90 ]]; then
        echo "${Yellow}Progress ${Green}[=========>-${Cyan}${1}%${Normal}${Green}-<=========]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} -lt 100 ]]; then
        echo "${Yellow}Progress ${Green}[==========>${Cyan}${1}%${Normal}${Green}<==========]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    elif [[ ${1} == 100 ]]; then
        echo "${Yellow}Progress ${Green}[===========${Cyan}${1}%${Normal}${Green}===========]  ${Yellow}UPS: ${Cyan}${2}  ${Yellow}ETA: ${Cyan}${3} ${Yellow}STATUS: ${Cyan}${4}${Normal}"
    fi
}

# Upload file to give folder and use new filename if -r argument was passed and printing out new animation.
rclone_progress_bar() {
    tput civis
    echo "Starting download..."
    rm -f log
    touch log
    if [ -z "$new_filename" ]; then new_filename=$(basename "$file"); fi
    rclone -P --checkers=32 --onedrive-chunk-size 60M copyto "$file" oned:/"${u_folder}"/"$new_filename" | tee log >/dev/null || touch "$status_dir/failed" &
    until [ -z "$(jobs -r)" ]; do
        if [ -f "$status_dir/failed" ]; then
            echo
            echo "${Red}Upload failed!${Normal}"
            break
        fi
        show_bar=$(progress_bar $(grep -Eo '[0-9]{1,3}'% log | tail -n1 | cut -d '%' -f 1) $(grep 'ETA' log | tail -n1 | cut -d ',' -f5) $(grep 'ETA' log | tail -n1 | cut -d ',' -f6 | sed 's/ETA //') $(grep 'ETA' log | tail -n1 | cut -d ',' -f3 | sed 's/^.*   //'))
        echo -ne "\r$show_bar"
        sleep 0.1
    done #|| echo -ne "\rDownload Can't be completed, Check download link." && tput cnorm && exit 1
    tput cnorm
}

# Final part of animation if upload was succesfull.
end_animation() {
    tput civis

    dls=$(grep 'CN' log | tail -n1 | cut -d ' ' -f 4 | sed 's/DL://')
    echo -ne "\r${Yellow}Progress ${Green}[======->${Cyan}Completed${Green}<-=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======/>${Cyan}COmpleted${Green}<\=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======|>${Cyan}COMpleted${Green}<|=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======\>${Cyan}COMPleted${Green}</=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======->${Cyan}COMPLeted${Green}<-=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======/>${Cyan}COMPLEted${Green}<\=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======|>${Cyan}COMPLETed${Green}<|=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======\>${Cyan}COMPLETEd${Green}</=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======->${Cyan}COMPLETED${Green}<-=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======/>${Cyan}COMPLETED${Green}<\=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo -ne "\r${Yellow}Progress ${Green}[======|>${Cyan}COMPLETED${Green}<|=====]  ${Yellow}UPS : ${dls}${Normal}"
    sleep 0.2
    echo

    tput cnorm
}

# Below function is copied from - https://gist.github.com/jaytaylor/5a90c49e0976aadfe0726a847ce58736
# Credit to @jkishner for https://gist.github.com/jkishner/2fccb24640a27c2d7ac9
function url_encode() {
    echo "$@" |
        sed \
            -e 's/%/%25/g' \
            -e 's/ /%20/g' \
            -e 's/!/%21/g' \
            -e 's/"/%22/g' \
            -e "s/'/%27/g" \
            -e 's/#/%23/g' \
            -e 's/(/%28/g' \
            -e 's/)/%29/g' \
            -e 's/+/%2b/g' \
            -e 's/,/%2c/g' \
            -e 's/-/%2d/g' \
            -e 's/:/%3a/g' \
            -e 's/;/%3b/g' \
            -e 's/?/%3f/g' \
            -e 's/@/%40/g' \
            -e 's/\$/%24/g' \
            -e 's/\&/%26/g' \
            -e 's/\*/%2a/g' \
            -e 's/\./%2e/g' \
            -e 's/\//%2f/g' \
            -e 's/\[/%5b/g' \
            -e 's/\\/%5c/g' \
            -e 's/\]/%5d/g' \
            -e 's/\^/%5e/g' \
            -e 's/_/%5f/g' \
            -e 's/`/%60/g' \
            -e 's/{/%7b/g' \
            -e 's/|/%7c/g' \
            -e 's/}/%7d/g' \
            -e 's/~/%7e/g'
}

# rclone_progress_bar -> progress_bar -> end_animation -> Print dowload link.
upload() {
    echo "Initializing process, might take up to 10 seconds..."
    rclone_progress_bar
    wait
    if [ -f "$status_dir/failed" ]; then
        echo -e "\rUpload Failed .......\n"
        exit 1
    fi
    end_animation
    url_file=$(url_encode "${new_filename}")
    url_folder=$(jq -rn --arg x "${u_folder%/}" '$x|@uri')
    echo " Upload Completed "
    echo " Download link - ${lightgreen}https://index.sauraj.eu.org/${url_folder}/${url_file}${normal} "
}

help() {
    echo "
${aqua}Usage : ksau [OPTION]... [FILE]...${normal}

${aqua}upload [FILE] [FOLDER]${normal}    : Uploads the given file to the given folder
                            on index.

${aqua}upload -r [FILE] [FOLDER]${normal} : Uploads the given file to the given folder
                            but with new filename with random strings
                            at last (before extension if present).

${aqua}setup${normal}                     : Recquired while using first time.

${aqua}update${normal}                    : Fetch and install latest version
                            available.

${aqua}dependencies${normal}              : Installs recquired dependencies.

${aqua}help${normal}                      : To get this message.

${aqua}version${normal}                   : To get version info.

Example : ${lightgreen}ksau upload test.txt Public

${orange}Tool By Sauraj (@Ksauraj)${normal}
"
}

_update_copy() {
    local file=$1
    if declare -p TERMUX_VERSION &>/dev/null; then
        cp "$file" "$PREFIX/bin"
    else
        sudo cp "$file" /usr/local/bin
    fi
}

update() {
    if ! ping -c2 google.com &>/dev/null; then
        echo "Please check your internet connection"
        return
    fi

    local tmpfilename new_version new_version_string
    tmpfilename=ksau-$RANDOM

    echo "Fetching"
    curl --progress-bar -Lo "$tmpfilename" https://raw.githubusercontent.com/noobyysauraj/global_index_source/master/ksau

    new_version=$(grep 'KSAU_VERSION=' "$tmpfilename" | cut -d= -f2)
    new_version_string=$(grep 'KSAU_VERSION_STRING=' "$tmpfilename" | cut -d= -f2)
    if [ "$new_version" -gt "$KSAU_VERSION" ]; then
        echo "New version found $Cyan($KSAU_VERSION_STRING -> $new_version_string)$Normal"
        _update_copy "$tmpfilename"
    else
        echo "Already on latest release."
    fi

    rm -f "$tmpfilename"
}

version() {
    echo "${orange}${KSAU_VERSION_STRING} ${normal}"
}

if [[ $1 == "upload" ]]; then
    if [[ $2 == "-r" ]]; then
        shift
        readonly file="$2"
        readonly u_folder="$3"
        add_random_string $(basename "$file")
        upload
    else
        readonly file="$2"
        readonly u_folder="$3"
        upload
    fi
elif [[ $1 == "setup" ]]; then
    setup
elif [[ $1 == "dependencies" ]]; then
    dependencies
elif [[ $1 == "update" ]]; then
    update
elif [[ $1 == "version" ]]; then
    version
elif [[ $1 == "help" ]]; then
    help
elif [[ $1 == "" ]]; then
    help
else
    echo "Unknown Argument passed."
    help
fi
